[{"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\index.js":"1","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\App.js":"2","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\UseSearchForm.js":"3","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\ValidateInfo.js":"4","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\api\\GetCurrentWeather.js":"5","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\api\\GetDailyWeather.js":"6","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\CurrentWeather.js":"7","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\HandleCurrentWeather.js":"8","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\fromCalvinToCelsius.js":"9","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\HandleDayCycle.js":"10","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\handleLocalTime.js":"11","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\SingleDayComponent.js":"12","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\addZero.js":"13","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\IconService.js":"14","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\SwitchBtn.js":"15","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\celsiusToFahrenheit.js":"16","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\PopUp.js":"17","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\api\\CurrentWeatherSevice.js":"18","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\LoadingComponent.js":"19"},{"size":197,"mtime":1610720917430,"results":"20","hashOfConfig":"21"},{"size":4697,"mtime":1611314836871,"results":"22","hashOfConfig":"21"},{"size":4061,"mtime":1611238413380,"results":"23","hashOfConfig":"21"},{"size":161,"mtime":1611237191999,"results":"24","hashOfConfig":"21"},{"size":288,"mtime":1611153343834,"results":"25","hashOfConfig":"21"},{"size":305,"mtime":1610730958132,"results":"26","hashOfConfig":"21"},{"size":2050,"mtime":1611314482393,"results":"27","hashOfConfig":"21"},{"size":715,"mtime":1611056489594,"results":"28","hashOfConfig":"21"},{"size":99,"mtime":1610814204644,"results":"29","hashOfConfig":"21"},{"size":3697,"mtime":1611050718511,"results":"30","hashOfConfig":"21"},{"size":909,"mtime":1611238532962,"results":"31","hashOfConfig":"21"},{"size":764,"mtime":1611238576444,"results":"32","hashOfConfig":"21"},{"size":130,"mtime":1611067777624,"results":"33","hashOfConfig":"21"},{"size":2245,"mtime":1611239153332,"results":"34","hashOfConfig":"21"},{"size":856,"mtime":1611146694154,"results":"35","hashOfConfig":"21"},{"size":103,"mtime":1611261724061,"results":"36","hashOfConfig":"21"},{"size":1435,"mtime":1611226660350,"results":"37","hashOfConfig":"21"},{"size":563,"mtime":1611154107411,"results":"38","hashOfConfig":"21"},{"size":421,"mtime":1611229277144,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},"4mt7mf",{"filePath":"43","messages":"44","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"45","messages":"46","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"42"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"42"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"42"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"42"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"42"},"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\index.js",[],["84","85"],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\App.js",["86"],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\UseSearchForm.js",["87","88","89"],"import React, { useEffect, useState } from \"react\";\r\nimport GetCurrentWeatherbyCity from \"../api/GetCurrentWeather\";\r\nimport GetDailyWeather from \"../api/GetDailyWeather\";\r\nimport HandleCurrentWeather from \"./HandleCurrentWeather\";\r\nimport fromCalvinToCelsius from \"./fromCalvinToCelsius\";\r\nimport HandleDayCycle from \"./HandleDayCycle\";\r\nimport handleLocalTime from \"./handleLocalTime\";\r\nimport addZero from \"./addZero\";\r\n// import GetCurrentWeatherByCity from \"../api/GetCurrentWeather\";\r\nimport CurrentWeatherService from \"../api/CurrentWeatherSevice\";\r\n\r\nconst UseSearchForm = () => {\r\n  const [city, setCity] = useState(\"\");\r\n  const [currentWeather, setCurrentWeather] = useState();\r\n  const [errors, setErrors] = useState({});\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [isSubmitted, setIsSubmitted] = useState(null);\r\n  const [dailyWeather, setDailyWeather] = useState();\r\n  const [dayCycle, setDayCycle] = useState(\"\");\r\n  const [localTime, setLocalTime] = useState(\"\");\r\n  const [currentPosition, setCurrentPosition] = useState(\"\");\r\n\r\n  function handleChange(e) {\r\n    setCity(e.target.value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    async function handleWeatherApi(city) {\r\n      try {\r\n        if (Object.keys(errors).length === 0 && isSubmitting) {\r\n          let responseCurrentWeather = \"\";\r\n          if (city) {\r\n            responseCurrentWeather = await CurrentWeatherService.getCurrentWeatherByCity(\r\n              city\r\n            );\r\n          } else {\r\n            responseCurrentWeather = await CurrentWeatherService.getCurrentWeatherByLocalization(\r\n              currentPosition.lon,\r\n              currentPosition.lat\r\n            );\r\n          }\r\n          HandleCurrentWeather(responseCurrentWeather, setCurrentWeather);\r\n          const timeZoneInSec = responseCurrentWeather.data.timezone;\r\n          const lon = responseCurrentWeather.data.coord.lon;\r\n          const lat = responseCurrentWeather.data.coord.lat;\r\n          setLocalTime(handleLocalTime(timeZoneInSec));\r\n          const responseDailyWeather = await GetDailyWeather(lon, lat);\r\n          HandleDayCycle(responseCurrentWeather, setDayCycle, lon, lat);\r\n\r\n          setIsSubmitting(false);\r\n          setIsSubmitted(true);\r\n\r\n          setDailyWeather(\r\n            getFullDailyWeather(responseDailyWeather, timeZoneInSec)\r\n          );\r\n        }\r\n      } catch (error) {\r\n        setErrors({\r\n          city: \"Do not find this city\",\r\n        });\r\n      }\r\n    }\r\n\r\n    handleWeatherApi(city);\r\n  }, [errors, currentPosition]);\r\n\r\n  function getFullDailyWeather(responseDailyWeather, timeZoneInSec) {\r\n    const timeZoneInMiliSec = timeZoneInSec * 1000;\r\n    const date = new Date();\r\n    const localTime = new Date(date.valueOf() + timeZoneInMiliSec);\r\n\r\n    function handleNextDay(indexNextDay) {\r\n      const nextDay = new Date(localTime);\r\n      nextDay.setDate(nextDay.getDate() + indexNextDay + 1);\r\n      return {\r\n        day: addZero(nextDay.getUTCDate()),\r\n        month: addZero(nextDay.getUTCMonth() + 1),\r\n      };\r\n    }\r\n\r\n    const nextFourDays = responseDailyWeather.data.daily\r\n      .slice(1, 5)\r\n      .map((item) => item);\r\n    const nextFourDaysTemp = nextFourDays.map((day) => {\r\n      return { temp: fromCalvinToCelsius(day.temp.day) };\r\n    });\r\n    const nextFourDaysClouds = nextFourDays.map((day) => {\r\n      return { description: day.weather[0].description };\r\n    });\r\n    const nextDayDate = nextFourDays.map((day, index) => {\r\n      return { date: handleNextDay(index) };\r\n    });\r\n    const fullDailyWeather = nextFourDaysTemp.map((day, index) => {\r\n      return Object.assign(\r\n        {},\r\n        day,\r\n        nextFourDaysClouds[index],\r\n        nextDayDate[index]\r\n      );\r\n    });\r\n    return fullDailyWeather;\r\n  }\r\n\r\n  return {\r\n    city,\r\n    currentWeather,\r\n    dailyWeather,\r\n    errors,\r\n    isSubmitting,\r\n    isSubmitted,\r\n    dayCycle,\r\n    localTime,\r\n    handleChange,\r\n    setIsSubmitting,\r\n    setErrors,\r\n    setCity,\r\n    setCurrentPosition,\r\n  };\r\n};\r\n\r\nexport default UseSearchForm;\r\n","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\ValidateInfo.js",[],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\api\\GetCurrentWeather.js",[],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\api\\GetDailyWeather.js",[],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\CurrentWeather.js",[],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\HandleCurrentWeather.js",[],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\fromCalvinToCelsius.js",[],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\HandleDayCycle.js",["90"],"import suncalc, { sunset } from \"suncalc\";\r\n\r\nexport default function HandleDayCycle({ data }, setDayCycle, lon, lat) {\r\n  const currentTime = new Date(); // Obecna data i godzina\r\n  //   console.log(currentTime.getDay());\r\n\r\n  // Suma czasu obecnego do wschodu i do zachodu słońca - wartość bezwzględna\r\n  //   console.log(\"sumTimeToRiseAndSet\" + sumTimeToRiseAndSet);\r\n\r\n  // const dusk = suncalc.getTimes(new Date(), lat, lon).dusk.getTime();\r\n  const goldenHour = suncalc\r\n    .getTimes(new Date(), lat, lon)\r\n    .goldenHour.getTime();\r\n\r\n  console.log(suncalc.getTimes(new Date(), lat, lon));\r\n\r\n  const goldenHourEnd = suncalc\r\n    .getTimes(new Date(), lat, lon)\r\n    .goldenHourEnd.getTime();\r\n\r\n  const dusk = suncalc.getTimes(new Date(), lat, lon).dusk.getTime();\r\n  const sunSet = suncalc.getTimes(new Date(), lat, lon).sunset.getTime();\r\n\r\n  const sunRise = suncalc.getTimes(new Date(), lat, lon).sunrise.getTime();\r\n  const dawn = suncalc.getTimes(new Date(), lat, lon).dawn.getTime();\r\n\r\n  const sumTimeToRiseAndDawn = Math.abs(\r\n    new Date() - sunRise + (new Date() - dawn)\r\n  );\r\n  const differenceSunRiseAndDawn = sunRise - dawn;\r\n\r\n  const sumTimeToSetAndGoldenHour = Math.abs(\r\n    new Date() - sunSet + (new Date() - goldenHour)\r\n  );\r\n  const differenceSunSetAndGoldenHour = sunSet - goldenHour;\r\n\r\n  const sumTimeToSetAndDusk = Math.abs(\r\n    new Date() - sunSet + (new Date() - dusk)\r\n  );\r\n  const differenceDuskAndSunSed = dusk - sunSet;\r\n\r\n  const sumTimeToRiseAndGoldenHourEnd = Math.abs(\r\n    new Date() - sunRise + (new Date() - goldenHourEnd)\r\n  );\r\n  const differenceGoldenHourEndAndSunRise = goldenHourEnd - sunRise;\r\n\r\n  const differenceBetweenSetAndRise = sunSet - sunRise;\r\n  const toRise = currentTime - sunRise;\r\n  const toSet = currentTime - sunSet;\r\n  const sumTimeToRiseAndSet = Math.abs(toRise + toSet);\r\n\r\n  // console.log(sunRiseDate)\r\n  // console.log(suncalc.getTimes(new Date(), lat, lon).sunrise)\r\n\r\n  // if(sumTimeToRiseAndSet > differenceBetweenSetAndRise) {\r\n  //     setDayCycle(\"night\");\r\n  //     if(new Date() > sunSetDate && new Date() < dusk) {\r\n  //       setDayCycle(\"evening\")\r\n  //     }\r\n  //     if(new Date() < sunRiseDate && new Date() > dawn) {\r\n  //       setDayCycle(\"morning\")\r\n  //     }\r\n  // }else {\r\n  //     setDayCycle(\"day\");\r\n  //     if(new Date() > sunRiseDate && new Date() < goldenHourEnd) {\r\n  //       setDayCycle(\"morning\")\r\n  //     }\r\n  //     if(new Date() < sunSetDate && new Date() > goldenHour) {\r\n  //       setDayCycle('evening')\r\n  //     }\r\n  // }\r\n  if (sumTimeToRiseAndSet > differenceBetweenSetAndRise) {\r\n    setDayCycle(\"night\");\r\n    if (\r\n      sumTimeToSetAndDusk < differenceDuskAndSunSed &&\r\n      differenceDuskAndSunSed - sumTimeToSetAndDusk < differenceDuskAndSunSed\r\n    ) {\r\n      console.log(\"night evening\");\r\n      setDayCycle(\"evening\");\r\n    }\r\n    if (\r\n      sumTimeToRiseAndDawn < differenceSunRiseAndDawn &&\r\n      differenceSunRiseAndDawn - sumTimeToRiseAndDawn < differenceSunRiseAndDawn\r\n    ) {\r\n      console.log(\"night morning\");\r\n      setDayCycle(\"morning\");\r\n    }\r\n  } else {\r\n    setDayCycle(\"day\");\r\n    if (\r\n      sumTimeToRiseAndGoldenHourEnd < differenceGoldenHourEndAndSunRise &&\r\n      differenceGoldenHourEndAndSunRise - sumTimeToRiseAndGoldenHourEnd <\r\n        differenceGoldenHourEndAndSunRise\r\n    ) {\r\n      console.log(\"day morning\");\r\n      setDayCycle(\"morning\");\r\n    }\r\n    if (\r\n      sumTimeToSetAndGoldenHour < differenceSunSetAndGoldenHour &&\r\n      differenceSunSetAndGoldenHour - sumTimeToSetAndGoldenHour <\r\n        differenceSunSetAndGoldenHour\r\n    ) {\r\n      console.log(\"day evening\");\r\n      setDayCycle(\"evening\");\r\n    }\r\n  }\r\n}\r\n","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\handleLocalTime.js",[],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\SingleDayComponent.js",[],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\addZero.js",[],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\IconService.js",[],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\SwitchBtn.js",["91"],"import React, {useState} from 'react';\r\nimport Switch from \"react-switch\";\r\nimport {RiCelsiusFill, RiFahrenheitFill} from 'react-icons/ri';\r\n\r\nconst SwitchBtn = ({isCelsius, setIsCelsius})=> {\r\n\r\n    // const [isCelsius, setIsCelsius] = useState(true);\r\n    \r\n    return (\r\n        <div className=\"switch-btn\">\r\n          <label>\r\n            <Switch\r\n              onChange={()=> setIsCelsius(!isCelsius)}\r\n              checked={!isCelsius}\r\n              className=\"react-switch\"\r\n              offColor=\"#2E8B57\"\r\n              onColor=\"#6495ED\"\r\n              checkedIcon={<RiFahrenheitFill/>}\r\n              uncheckedIcon={<RiCelsiusFill/>}\r\n            />\r\n          </label>\r\n          {/* <p>\r\n            The switch is celsius <span>{isCelsius ? \"YES\" : \"NO\"}</span>.\r\n          </p> */}\r\n        </div>\r\n      );\r\n\r\n}\r\n\r\nexport default SwitchBtn","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\celsiusToFahrenheit.js",[],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\PopUp.js",["92"],"import React from \"react\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport { MdCancel } from \"react-icons/md\";\r\nimport { ImCancelCircle } from 'react-icons/im';\r\n\r\nconst PopUp = ({ setIsSubmitting, setCurrentPosition, setShowPopUp }) => {\r\n  function getLocalization() {\r\n    navigator.geolocation.getCurrentPosition((x) =>\r\n      setCurrentPosition({ lat: x.coords.latitude, lon: x.coords.longitude })\r\n    );\r\n    setIsSubmitting(true);\r\n    setShowPopUp(false);\r\n  }\r\n\r\n  return (\r\n    <div className=\"popup-container\">\r\n      <button className=\"close-menu-btn\" onClick={() => setShowPopUp(false)}>\r\n        <MdCancel />\r\n      </button>\r\n      <div className=\"popup-wrapper\">\r\n        <div className=\"permission\">\r\n          <span>Do you want to get weather based on your localization?</span>\r\n        </div>\r\n        <div className=\"buttons\">\r\n          <Button\r\n            className=\"agree-btn\"\r\n            variant=\"contained\"\r\n            color=\"primary\"\r\n            onClick={getLocalization}\r\n          >\r\n            yes\r\n          </Button>\r\n          {/* <button onClick={getLocalization}>GET LOCALIZATION</button> */}\r\n          <Button\r\n            className=\"cancel-btn\"\r\n            onClick={() => setShowPopUp(false)}\r\n            variant=\"contained\"\r\n            color=\"default\"\r\n          >\r\n            NO\r\n          </Button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PopUp;\r\n","C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\api\\CurrentWeatherSevice.js",[],"C:\\Users\\kwola\\Desktop\\React\\weatherapp\\src\\components\\LoadingComponent.js",["93","94"],"import React, { useState } from \"react\";\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nconst LoadingComponent = () => {\r\n  let [loading, setLoading] = useState(true);\r\n  let [color, setColor] = useState(\"#ffffff\");\r\n  return (\r\n    <>\r\n      <div className=\"sweet-loading\">\r\n        <ClipLoader color={color} loading={loading} size={150} />\r\n      </div>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default LoadingComponent;\r\n",{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":1,"column":38,"nodeType":"101","messageId":"102","endLine":1,"endColumn":44},{"ruleId":"99","severity":1,"message":"103","line":1,"column":8,"nodeType":"101","messageId":"102","endLine":1,"endColumn":13},{"ruleId":"99","severity":1,"message":"104","line":2,"column":8,"nodeType":"101","messageId":"102","endLine":2,"endColumn":31},{"ruleId":"105","severity":1,"message":"106","line":65,"column":6,"nodeType":"107","endLine":65,"endColumn":31,"suggestions":"108"},{"ruleId":"99","severity":1,"message":"109","line":1,"column":19,"nodeType":"101","messageId":"102","endLine":1,"endColumn":25},{"ruleId":"99","severity":1,"message":"110","line":1,"column":16,"nodeType":"101","messageId":"102","endLine":1,"endColumn":24},{"ruleId":"99","severity":1,"message":"111","line":4,"column":10,"nodeType":"101","messageId":"102","endLine":4,"endColumn":24},{"ruleId":"99","severity":1,"message":"112","line":5,"column":17,"nodeType":"101","messageId":"102","endLine":5,"endColumn":27},{"ruleId":"99","severity":1,"message":"113","line":6,"column":15,"nodeType":"101","messageId":"102","endLine":6,"endColumn":23},"no-native-reassign",["114"],"no-negated-in-lhs",["115"],"no-unused-vars","'useRef' is defined but never used.","Identifier","unusedVar","'React' is defined but never used.","'GetCurrentWeatherbyCity' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'city' and 'isSubmitting'. Either include them or remove the dependency array.","ArrayExpression",["116"],"'sunset' is defined but never used.","'useState' is defined but never used.","'ImCancelCircle' is defined but never used.","'setLoading' is assigned a value but never used.","'setColor' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"117","fix":"118"},"Update the dependencies array to be: [errors, currentPosition, city, isSubmitting]",{"range":"119","text":"120"},[2519,2544],"[errors, currentPosition, city, isSubmitting]"]